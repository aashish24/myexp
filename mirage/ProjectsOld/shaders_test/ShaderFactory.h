
#ifndef __PROJECT2_SHADER_FACTORY_H__ 
#define __PROJECT2_SHADER_FACTORY_H__ 

#include <map>
#include <string>

#include "Shader.h"

namespace Project2
{  
  /////////////////////////////////////////////////////////////////////////////
  //
  // Factory to create shader objects. 
  //
  /////////////////////////////////////////////////////////////////////////////

  class ShaderFactory
  {
    public: 
    
      /////////////////////////////////////////////////////////////////////////
      //
      // Smart definitions. 
      //
      /////////////////////////////////////////////////////////////////////////

      typedef Shader* ( *FPtr )( void ); 


      /////////////////////////////////////////////////////////////////////////
      //
      // Singleton.
      //
      /////////////////////////////////////////////////////////////////////////

      static ShaderFactory* instance(); 


      /////////////////////////////////////////////////////////////////////////
      //
      // Create shader object with given id. 
      // @Precondition: Registration of shader with given id.  
      //
      /////////////////////////////////////////////////////////////////////////

      Shader* create( const std::string& id );


      /////////////////////////////////////////////////////////////////////////
      //
      // Register creator with unique identifier for a particular shader object. 
      //
      /////////////////////////////////////////////////////////////////////////

      bool registerCreator( const std::string& id, FPtr ptr );


    private: 

      std::map< std::string, FPtr > _creators;
  };
}

#endif // __PROJECT2_SHADER_FACTORY_H__ 
