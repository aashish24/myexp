
#ifndef __MSG_CORE_SHADER_H__
#define __MSG_CORE_SHADER_H__

#include "IShader.h"

#include <vector>

namespace Msg
{
  namespace MsgCore
  {
    class Node; 
  }
}

namespace Project2
{
  /////////////////////////////////////////////////////////////////////////////
  //
  // Shader base class. 
  // 
  /////////////////////////////////////////////////////////////////////////////      

  class Shader : public IShader
  {
    public: 

      /////////////////////////////////////////////////////////////////////////
      //
      // Constructor. 
      //
      /////////////////////////////////////////////////////////////////////////
      
      Shader();


      /////////////////////////////////////////////////////////////////////////
      //
      // Copy constructor. 
      //
      /////////////////////////////////////////////////////////////////////////

      Shader( const Shader& from );


      /////////////////////////////////////////////////////////////////////////
      //
      // Get state of being dirty. 
      //
      /////////////////////////////////////////////////////////////////////////
      
      virtual bool  dirty() const
      {
        return _dirty;
      }

      
      /////////////////////////////////////////////////////////////////////////
      //
      // Set state of being dirty. 
      //
      /////////////////////////////////////////////////////////////////////////

      virtual void  dirty( bool flag )
      {
        _dirty = flag;
      }


      /////////////////////////////////////////////////////////////////////////
      //
      // Return program id as returned by GLSL. 
      //
      /////////////////////////////////////////////////////////////////////////
      
      virtual int   program() const
      {
        return _program;
      }


      /////////////////////////////////////////////////////////////////////////
      //
      // Set program id. 
      //
      /////////////////////////////////////////////////////////////////////////
      
      virtual void  program( int id )
      {
        _program = id;
      }


      /////////////////////////////////////////////////////////////////////////
      //
      // Get vertex shader file name.  
      //
      /////////////////////////////////////////////////////////////////////////

      virtual std::string vertexShaderFile() const
      {
        return _vertShaderFile;
      }


      /////////////////////////////////////////////////////////////////////////
      //
      // Set vertex shader file name.  
      //
      /////////////////////////////////////////////////////////////////////////

      virtual void  vertexShaderFile( const std::string& file )
      {
        _vertShaderFile = file;        
      }
    

      /////////////////////////////////////////////////////////////////////////
      //
      // Get fragment shader file name. 
      //
      /////////////////////////////////////////////////////////////////////////

      virtual std::string fragmentShaderFile() const
      {        
        return _fragShaderFile;
      }

      
      /////////////////////////////////////////////////////////////////////////
      //
      // Set fragment shader file name.  
      //
      /////////////////////////////////////////////////////////////////////////

      virtual void  fragmentShaderFile( const std::string& file )
      {        
        _fragShaderFile = file;
      }


    protected: 

      /////////////////////////////////////////////////////////////////////////
      //
      // Destructor.  
      //
      /////////////////////////////////////////////////////////////////////////
      
      virtual ~Shader();

    
    protected: 
      
      bool          _dirty;

      int           _program;
      
      std::string   _vertShaderFile;
      std::string   _fragShaderFile;
  };
}

#endif // __MSG_CORE_SHADER_H__
