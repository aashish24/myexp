
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Aashish Chaudhary
//
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
//
// Class defines the global data types.  
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __TYPES_H__
#define  __TYPES_H__  

#include <string>
#include <vector>

#include "Export.h"

namespace Core
{
  //////////////////////////////////////////////////////////////////////////////
  // 
  // Defines states for the input configurations. 
  //
  //////////////////////////////////////////////////////////////////////////////

  enum ActionState 
  { 
    OFF          = 0, 
    ON          = 1, 
    TOGGLE_ON    = 2, 
    TOGGLE_OFF  = 3
  };  

  /////////////////////////////////////////////////////////////////////////////
  // 
  // Core::Core::InteractionMode mode.
  // @NOTE: 
  // - WORLD for all global interactions.  
  // - OBJECT for manipulating states of individual objects 
  //   once they are selected. 
  // - WAND for all interactions with the wand object. 
  //
  /////////////////////////////////////////////////////////////////////////////

  enum InteractionMode 
  { 
    WORLD    = 0, 
    OBJECT  = 1,    
    WAND    = 2  
  };

  /////////////////////////////////////////////////////////////////////////////
  // 
  // Navigation mode. 
  //
  /////////////////////////////////////////////////////////////////////////////

  enum NavigationMode 
  {
    TRACKBALL        = 0, 
    USER            = 1, 
    FLIGHT          = 2, 
    HELICOPTER      = 3, 
    OSSIMNAV        = 4
  }; 

  /////////////////////////////////////////////////////////////////////////////
  //  
  // This is used to determine whether we are manipulating  
  // WORLD state of LOCAL state. ex. World transforms or Local transforms.
  //
  /////////////////////////////////////////////////////////////////////////////

  enum Scope 
  { 
    LOCAL    = 0, 
    GLOBAL  = 1
  };

  /////////////////////////////////////////////////////////////////////////////
  // 
  // Device data type. 
  //
  /////////////////////////////////////////////////////////////////////////////

  enum DeviceData 
  {
    POSITIVE    =  2, 
    NEGATIVE    = -1, 
    ZERO        =  0, 
    CENTER      = 1
  };

  /////////////////////////////////////////////////////////////////////////////
  // 
  // Action data.
  //
  /////////////////////////////////////////////////////////////////////////////

  struct ActionData
  {
    std::string key;
    std::vector<ActionState> value;
  };

  /////////////////////////////////////////////////////////////////////////////
  // 
  // Defines the mode for 6DOF device. 
  //
  /////////////////////////////////////////////////////////////////////////////

  enum Action
  {
    PICK              = 0, 
    MOVE              = 1,
    ROTATE            = 2, 
    PICK_AND_MOVE      = 3, 
    PICK_AND_ROTATE   = 4  
  };
}

#endif // __TYPES_H__
